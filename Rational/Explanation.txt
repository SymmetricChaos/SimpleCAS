Rational numbers are relatively easy to represent simply as an ordered pair of integers, the numerator and denominator. For ease of reference the Rational object has two attributes 'n' and 'd' which represent this. However there are a few details that we need to deal with. In particular for the sake of readability we need the fraction to be in its canonical form. It would be strange to have 70/30 not simply be 7/3. To do this we simply divide both the numerator and denominator by their greatest common divisor.

Before we get to making the fractions work mathematically we need to be able to print them out in some readable form. There is just two special cases to deal with here and a third we will look at later. First when the denominator is equal to one we only print out the numerator since our Rational object is representing an integer. Second we may need to represent the fraction as a LaTeX expression to make it look nice. Fortunately the LaTeX expression for fractions is very simple.

Now we move on to using Rational objects as numbers. Because SimpleCAS deals only with rational numbers we only need to define Rational objects to interact with themselves and with integers to make this simler when operations happen with integers we just turn them into Rationals. The RationalUtils file contains some functions to handle quickly creating Rational objects from other types.

Most of the numerical methods are self explanatory. The "dunder" (double underscore) methods provided by Python handle interaction with addition, subtraction, multiplication, and division, as well as negation and raising a number to a power. We need one numerical method that Python doesn't have a dunder method for which is inversion, flipping the numerator and denominator. We also have to restrict powers to non-negative integers since otherwise the result may not be a rational number.

With subtraction defined it is easy to define comparison operations like greater than, less than, and equal to. Python also makes these accessible with dunder methods.